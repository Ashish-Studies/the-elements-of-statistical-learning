{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.3.3 From Least Squares to Nearest Neighbors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Generates 10 means $m_k$ from a bivariate Gaussian distrubition for each class:\n",
    "   - $N((1, 0)^T, \\textbf{I})$ for <span style=\"color: blue\">BLUE</span>\n",
    "   - $N((0, 1)^T, \\textbf{I})$ for <span style=\"color: orange\">ORANGE</span>\n",
    "2. For each class generates 100 observations as follows:\n",
    "   - For each observation it picks $m_k$ at random with probability 1/10.\n",
    "   - Then generates a $N(m_k,\\textbf{I}/5)$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def generate_data(size, mean):\n",
    "    identity = np.identity(2)\n",
    "    m = np.random.multivariate_normal(mean, identity, 10)\n",
    "    return np.array([\n",
    "        np.random.multivariate_normal(random.choice(m), identity / 5)\n",
    "        for _ in range(size)\n",
    "    ])\n",
    "\n",
    "blue_data = generate_data(100, [1, 0])\n",
    "orange_data = generate_data(100, [0, 1])\n",
    "# plotting\n",
    "fig = plt.figure(figsize = (8, 8))\n",
    "axes = fig.add_subplot(1, 1, 1)\n",
    "axes.plot(blue_data[:, 0], blue_data[:, 1], 'o', color='blue')\n",
    "axes.plot(orange_data[:, 0], orange_data[:, 1], 'o', color='orange')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
